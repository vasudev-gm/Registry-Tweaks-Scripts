<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
	<!--https://schneegans.de/windows/unattend-generator/?LanguageMode=Interactive&ProcessorArchitecture=x86&ProcessorArchitecture=amd64&ProcessorArchitecture=arm64&BypassRequirementsCheck=true&BypassNetworkCheck=true&ComputerNameMode=Random&CompactOsMode=Default&TimeZoneMode=Implicit&PartitionMode=Interactive&DiskAssertionMode=Skip&WindowsEditionMode=Interactive&InstallFromMode=Automatic&PEMode=Default&UserAccountMode=InteractiveLocal&PasswordExpirationMode=Unlimited&LockoutMode=Default&HideFiles=HiddenSystem&ShowFileExtensions=true&ClassicContextMenu=true&LaunchToThisPC=true&TaskbarSearch=Icon&TaskbarIconsMode=Default&DisableWidgets=true&LeftTaskbar=true&HideTaskViewButton=true&ShowAllTrayIcons=true&DisableBingResults=true&StartTilesMode=Default&StartPinsMode=Empty&DisableFastStartup=true&DisableSystemRestore=true&EnableLongPaths=true&HardenSystemDriveAcl=true&AllowPowerShellScripts=true&DisableLastAccess=true&PreventAutomaticReboot=true&DisableAppSuggestions=true&PreventDeviceEncryption=true&HideEdgeFre=true&DisableEdgeStartupBoost=true&MakeEdgeUninstallable=true&DeleteWindowsOld=true&EffectsMode=Custom&ControlAnimations=true&DWMAeroPeekEnabled=true&MenuAnimation=true&TooltipAnimation=true&SelectionFade=true&ListviewShadow=true&ThumbnailsOrIcon=true&DragFullWindows=true&ComboBoxAnimation=true&FontSmoothing=true&ListBoxSmoothScrolling=true&DropShadow=true&DesktopIconsMode=Custom&IconRecycleBin=true&IconThisPC=true&StartFoldersMode=Default&WifiMode=Interactive&ExpressSettings=DisableAll&LockKeysMode=Skip&StickyKeysMode=Default&ColorMode=Default&WallpaperMode=Default&LockScreenMode=Default&Remove3DViewer=true&RemoveBingSearch=true&RemoveClipchamp=true&RemoveClock=true&RemoveCortana=true&RemoveDevHome=true&RemoveFamily=true&RemoveFeedbackHub=true&RemoveGameAssist=true&RemoveInternetExplorer=true&RemoveMailCalendar=true&RemoveMaps=true&RemoveMixedReality=true&RemoveZuneVideo=true&RemoveNews=true&RemoveOffice365=true&RemoveOneDrive=true&RemoveOneNote=true&RemoveOutlook=true&RemovePaint3D=true&RemovePeople=true&RemovePhotos=true&RemovePowerAutomate=true&RemovePowerShell2=true&RemoveSkype=true&RemoveSolitaire=true&RemoveTeams=true&RemoveToDo=true&RemoveWallet=true&RemoveWeather=true&RemoveZuneMusic=true&RemoveWordPad=true&RemoveYourPhone=true&SystemScript0=powercfg+%2FH+OFF&SystemScriptType0=Cmd&SystemScript1=Windows+Registry+Editor+Version+5.00%0D%0A%0D%0A%5BHKEY_LOCAL_MACHINE%5CSOFTWARE%5CPolicies%5CMicrosoft%5CWindows%5CCloudContent%5D%0D%0A%22DisableCloudOptimizedContent%22%3Ddword%3A00000001&SystemScriptType1=Reg&SystemScript2=Write-Host+%22Installing+.NET+Framework+3.5+from+ISO...%22%0D%0Aforeach%28+%24drive+in+%5BSystem.IO.DriveInfo%5D%3A%3AGetDrives%28%29+%29+%7B%0D%0A++++if%28+%24found+%3D+Join-Path+-Path+%24drive.RootDirectory+-ChildPath+%27sources%5Csxs%27+-Resolve+-ErrorAction+%27SilentlyContinue%27+%29+%7B%0D%0A++++++++Enable-WindowsOptionalFeature+-Online+-FeatureName+%27NetFx3%27+-Source+%24found+-NoRestart%3B%0D%0A++++++++return%3B%0D%0A++++%7D%0D%0A%7D%0D%0A%27Cannot+find+any+files+that+match+pattern.%27+%7C+Write-Warning%3B%0D%0AExit&SystemScriptType2=Ps1&SystemScript3=%23+Check+Internet+connectivity%0D%0A%0D%0AWrite-Output+%22Checking+for+Internet+Connectvity+by+pinging+Google+DNS+8.8.8.8%22%0D%0A%24pp+%3D+%24ProgressPreference%0D%0A%24ProgressPreference+%3D+%27SilentlyContinue%27%0D%0Atest-netconnection+-ComputerName+8.8.8.8+-InformationLevel+Quiet%0D%0A%24ProgressPreference+%3D+%24pp%0D%0AWrite-Output+%22Internet+Connectivity+Check+Completed%21%22%0D%0A%0D%0A%3C%23%0D%0A.SYNOPSIS%0D%0AThis+PowerShell+script+ensures+it+is+run+with+administrator+privileges%2C+then+installs+the+necessary+Visual+C%2B%2B+Redistributables+and+DirectX+9+End-User+Runtime+silently.+It+provides+progress+updates+throughout+the+installation+process+and+handles+errors+gracefully.%0D%0A%0D%0A.DESCRIPTION%0D%0AThis+script+performs+the+following+tasks%3A%0D%0A-+Checks+if+it+is+run+with+administrator+privileges+and+relaunches+with+elevated+permissions+if+necessary.%0D%0A-+Downloads+and+installs+the+latest+Visual+C%2B%2B+Redistributables+from+a+GitHub+repository.%0D%0A-+Downloads+and+installs+the+DirectX+9+End-User+Runtime+from+Microsoft%27s+official+website.%0D%0A-+Provides+verbose+logging+for+detailed+output%2C+including+the+URLs+being+accessed%2C+the+files+being+downloaded%2C+and+the+installation+progress.%0D%0A-+Handles+errors+gracefully+by+catching+exceptions+and+providing+meaningful+error+messages.%0D%0A-+Waits+for+user+input+before+exiting+if+an+error+occurs+or+at+the+end+of+the+script%2C+ensuring+that+the+user+is+aware+of+the+script%27s+completion+or+any+issues+that+occurred.%0D%0A%0D%0A.PARAMETER+Verbose%0D%0AEnables+verbose+logging+for+detailed+output.+When+this+switch+is+used%2C+the+script+will+provide+additional+information+about+its+progress+and+actions.%0D%0A%0D%0A.EXAMPLE%0D%0A.%5CInstall-VCRedistAndDirectX.ps1+-Verbose%0D%0ARuns+the+script+with+verbose+logging+enabled%2C+providing+detailed+output+about+the+script%27s+progress+and+actions.%0D%0A%0D%0A.EXAMPLE%0D%0A%23+Running+the+script+from+the+Internet%0D%0Airm+https%3A%2F%2Fgist.githubusercontent.com%2Femilwojcik93%2Fef790a6b12c8e9358bbc52ed76fb495c%2Fraw%2FInstall-VCRedistAndDirectX.ps1+%7C+iex%0D%0ADownloads+and+runs+the+script+directly+from+the+provided+URL%2C+ensuring+that+the+latest+version+is+used.%0D%0A%0D%0A.LINK%0D%0Ahttps%3A%2F%2Fgist.github.com%2Femilwojcik93%2Fef790a6b12c8e9358bbc52ed76fb495c%0D%0A%23%3E%0D%0A%0D%0Aparam+%28%0D%0A++++%5Bswitch%5D%24Verbose%0D%0A%29%0D%0A%0D%0A%0D%0Aif+%28%21%28%5BSecurity.Principal.WindowsPrincipal%5D%5BSecurity.Principal.WindowsIdentity%5D%3A%3AGetCurrent%28%29%29.IsInRole%28%5BSecurity.Principal.WindowsBuiltInRole%5D%3A%3AAdministrator%29%29+%7B%0D%0A++++Write-Output+%22This+script+needs+to+be+run+as+Administrator.+Attempting+to+relaunch.%22%0D%0A++++%24argList+%3D+%40%28%29%0D%0A%0D%0A++++%24PSBoundParameters.GetEnumerator%28%29+%7C+ForEach-Object+%7B%0D%0A++++++++%24argList+%2B%3D+if+%28%24_.Value+-is+%5Bswitch%5D+-and+%24_.Value%29+%7B%0D%0A++++++++++++%22-%24%28%24_.Key%29%22%0D%0A++++++++%7D+elseif+%28%24_.Value%29+%7B%0D%0A++++++++++++%22-%24%28%24_.Key%29+%60%22%24%28%24_.Value%29%60%22%22%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%0D%0A++++%0D%0A++++%24script+%3D+if+%28%24PSCommandPath%29+%7B%0D%0A++++++++%22%26+%7B+%26+%60%22%24%28%24PSCommandPath%29%60%22+%24%7BargList%7D+%7D%22%0D%0A++++%7D+else+%7B%0D%0A++++++++%22%26%28%5BScriptBlock%5D%3A%3ACreate%28%28irm+https%3A%2F%2Fgist.githubusercontent.com%2Femilwojcik93%2Fef790a6b12c8e9358bbc52ed76fb495c%2Fraw%2FInstall-VCRedistAndDirectX.ps1%29%29%29+%24%7BargList%7D%22%0D%0A++++%7D%0D%0A%0D%0A++++%24powershellcmd+%3D+if+%28Get-Command+pwsh+-ErrorAction+SilentlyContinue%29+%7B+%22pwsh%22+%7D+else+%7B+%22powershell%22+%7D%0D%0A++++%24processCmd+%3D+if+%28Get-Command+wt.exe+-ErrorAction+SilentlyContinue%29+%7B+%22wt.exe%22+%7D+else+%7B+%24powershellcmd+%7D%0D%0A%0D%0A++++Start-Process+%24processCmd+-ArgumentList+%22%24powershellcmd+-ExecutionPolicy+Bypass+-NoProfile+-Command+%24script%22+-Verb+RunAs%0D%0A%0D%0A++++break%0D%0A%7D%0D%0A%0D%0A%23+Function+to+check+if+the+parent+process+is+explorer.exe%0D%0Afunction+Is-StartedByExplorer+%7B%0D%0A++++%24parentProcess+%3D+Get-WmiObject+Win32_Process+-Filter+%22ProcessId%3D%24%28%28Get-WmiObject+Win32_Process+-Filter+%22ProcessId%3D%24PID%22%29.ParentProcessId%29%22%0D%0A++++return+%24parentProcess.Name+-eq+%22explorer.exe%22%0D%0A%7D%0D%0A%0D%0A%23+Function+to+check+if+the+session+is+likely+to+close+at+the+end+of+the+script%0D%0Afunction+Is-SessionLikelyToClose+%7B%0D%0A++++%24commandLineArgs+%3D+%5BEnvironment%5D%3A%3AGetCommandLineArgs%28%29%0D%0A++++return+%28%24commandLineArgs+-contains+%22-NoProfile%22%29%0D%0A%7D%0D%0A%0D%0A%0D%0Afunction+Get-LatestReleaseUrl+%7B%0D%0A++++param+%28%0D%0A++++++++%5Bstring%5D%24RepoUrl%2C%0D%0A++++++++%5Bstring%5D%24FilePattern%0D%0A++++%29%0D%0A%0D%0A++++Write-Verbose+%22Fetching+the+latest+release+URL+from+%24RepoUrl...%22%0D%0A++++%24apiUrl+%3D+%22%24RepoUrl%2Freleases%2Flatest%22%0D%0A++++try+%7B%0D%0A++++++++%24response+%3D+Invoke-RestMethod+-Uri+%24apiUrl+-UseBasicParsing%0D%0A++++%7D+catch+%7B%0D%0A++++++++Write-Error+%22Failed+to+access+the+URL%3A+%24RepoUrl%22%0D%0A++++++++return+%24null%0D%0A++++%7D%0D%0A%0D%0A++++%24latestAsset+%3D+%24response.assets+%7C+Where-Object+%7B+%24_.name+-like+%24FilePattern+%7D%0D%0A++++if+%28%24null+-eq+%24latestAsset%29+%7B%0D%0A++++++++Write-Error+%22No+file+matching+the+pattern+%27%24FilePattern%27+found+in+the+latest+release.%22%0D%0A++++++++return+%24null%0D%0A++++%7D%0D%0A%0D%0A++++%24downloadUrl+%3D+%24latestAsset.browser_download_url%0D%0A++++Write-Verbose+%22Latest+release+URL%3A+%24downloadUrl%22%0D%0A++++return+%24downloadUrl%0D%0A%7D%0D%0A%0D%0Afunction+Download+%7B%0D%0A++++param+%28%0D%0A++++++++%5Bstring%5D%24Url%2C%0D%0A++++++++%5Bstring%5D%24Destination%2C%0D%0A++++++++%5Bstring%5D%24FileType%0D%0A++++%29%0D%0A%0D%0A++++Write-Verbose+%22Download+called+with+Url%3A+%24Url%2C+Destination%3A+%24Destination%2C+FileType%3A+%24FileType%22%0D%0A%0D%0A++++if+%28Test-Path+%24Destination%29+%7B%0D%0A++++++++Write-Verbose+%22Removing+existing+directory%3A+%24Destination%22%0D%0A++++++++Remove-Item+-Path+%24Destination+-Recurse+-Force+-ErrorAction+SilentlyContinue%0D%0A++++%7D%0D%0A++++Write-Verbose+%22Creating+directory%3A+%24Destination%22%0D%0A++++New-Item+-ItemType+Directory+-Force+-Path+%24Destination%0D%0A%0D%0A++++%24fileName+%3D+%5BSystem.IO.Path%5D%3A%3AGetFileName%28%24Url%29%0D%0A++++%24filePath+%3D+%22%24Destination%5C%24fileName%22%0D%0A++++Write-Verbose+%22Downloading+file+from+URL%3A+%24Url+to+%24filePath%22%0D%0A++++try+%7B%0D%0A++++++++Invoke-WebRequest+-Uri+%24Url+-OutFile+%24filePath+-ErrorAction+Stop%0D%0A++++%7D+catch+%7B%0D%0A++++++++Write-Error+%22Failed+to+download+the+file+from+URL%3A+%24Url%22%0D%0A++++++++return+%24null%0D%0A++++%7D%0D%0A%0D%0A++++if+%28-not+%28Test-Path+%24filePath%29%29+%7B%0D%0A++++++++Write-Error+%22Downloaded+file+not+found%3A+%24filePath%22%0D%0A++++++++return+%24null%0D%0A++++%7D%0D%0A%0D%0A++++Write-Verbose+%22Downloading+completed+for+file%3A+%24filePath%22%0D%0A%7D%0D%0A%0D%0Afunction+Install-VCRedist+%7B%0D%0A++++Write-Output+%22Downloading+and+installing+Visual+C%2B%2B+Redistributables...%22%0D%0A++++%24vcRedistUrl+%3D+Get-LatestReleaseUrl+-RepoUrl+%22https%3A%2F%2Fapi.github.com%2Frepos%2Fabbodi1406%2Fvcredist%22+-FilePattern+%22VisualCppRedist_AIO_x86_x64.exe%22%0D%0A++++if+%28%24null+-eq+%24vcRedistUrl%29+%7B%0D%0A++++++++throw+%22Failed+to+get+the+latest+Visual+C%2B%2B+Redistributables+URL.%22%0D%0A++++%7D%0D%0A%0D%0A++++Write-Verbose+%22Visual+C%2B%2B+Redistributables+URL%3A+%24vcRedistUrl%22%0D%0A%0D%0A++++%24tempDir+%3D+%22%24env%3ATEMP%5CVcRedist%22%0D%0A++++%24result+%3D+Download+-Url+%22%24vcRedistUrl%22+-Destination+%22%24tempDir%22+-FileType+%22exe%22%0D%0A++++if+%28%24null+-eq+%24result%29+%7B%0D%0A++++++++throw+%22Failed+to+download+and+extract+Visual+C%2B%2B+Redistributables.%22%0D%0A++++%7D%0D%0A%0D%0A++++%24vcRedistInstaller+%3D+%22%24tempDir%5CVisualCppRedist_AIO_x86_x64.exe%22%0D%0A++++if+%28-not+%28Test-Path+%24vcRedistInstaller%29%29+%7B%0D%0A++++++++throw+%22Installer+file+not+found%3A+%24vcRedistInstaller%22%0D%0A++++%7D%0D%0A%0D%0A++++Write-Verbose+%22Running+installer%3A+%24vcRedistInstaller+with+arguments%3A+%2Fy%22%0D%0A++++Start-Process+-FilePath+%24vcRedistInstaller+-ArgumentList+%22%2Fai+%2Fgm2%22+-NoNewWindow+-Wait%0D%0A%0D%0A++++Write-Output+%22Visual+C%2B%2B+Redistributables+installation+completed.%22%0D%0A%7D%0D%0A%0D%0Afunction+Install-DirectX+%7B%0D%0A++++Write-Output+%22Downloading+DirectX+9+End-User+Runtime...%22%0D%0A++++%24ErrorActionPreference+%3D+%27Stop%27%0D%0A%0D%0A++++%23+Ensure+the+temporary+directory+is+clean%0D%0A++++%24tempDir+%3D+%22%24env%3ATEMP%5Cdirectx%22%0D%0A++++if+%28Test-Path+%24tempDir%29+%7B%0D%0A++++++++Write-Verbose+%22Removing+existing+directory%3A+%24tempDir%22%0D%0A++++++++Remove-Item+-Path+%24tempDir+-Recurse+-Force+-ErrorAction+SilentlyContinue%0D%0A++++%7D%0D%0A++++Write-Verbose+%22Creating+directory%3A+%24tempDir%22%0D%0A++++New-Item+-ItemType+Directory+-Force+-Path+%24tempDir+%3E+%24null%0D%0A%0D%0A++++%24directxUrl+%3D+%22https%3A%2F%2Fdownload.microsoft.com%2Fdownload%2F8%2F4%2FA%2F84A35BF1-DAFE-4AE8-82AF-AD2AE20B6B14%2Fdirectx_Jun2010_redist.exe%22%0D%0A++++%24directxInstaller+%3D+%22%24tempDir%5Cdirectx_Jun2010_redist.exe%22%0D%0A++++Write-Verbose+%22Downloading+DirectX+from+URL%3A+%24directxUrl+to+%24directxInstaller%22%0D%0A++++Invoke-WebRequest+-Uri+%24directxUrl+-OutFile+%24directxInstaller%0D%0A%0D%0A++++Write-Verbose+%22Extracting+DirectX+9+End-User+Runtime...%22%0D%0A++++Start-Process+-FilePath+%24directxInstaller+-ArgumentList+%22%2FQ+%2FT%3A%24tempDir%22+-NoNewWindow+-Wait%0D%0A%0D%0A++++%24dxSetup+%3D+%22%24tempDir%5CDXSETUP.exe%22%0D%0A++++if+%28-not+%28Test-Path+%24dxSetup%29%29+%7B%0D%0A++++++++throw+%22DXSETUP.exe+not+found+in+%24tempDir%22%0D%0A++++%7D%0D%0A%0D%0A++++Write-Verbose+%22Installing+DirectX+9+End-User+Runtime+from+%24dxSetup+with+arguments%3A+%2Fsilent%22%0D%0A++++Start-Process+-FilePath+%24dxSetup+-ArgumentList+%22%2Fsilent%22+-NoNewWindow+-Wait%0D%0A%0D%0A++++Write-Output+%22DirectX+9+End-User+Runtime+installation+completed.%22%0D%0A%7D%0D%0A%0D%0Afunction+Main+%7B%0D%0A++++try+%7B%0D%0A++++++++Write-Output+%22Starting+installation+process...%22%0D%0A++++++++Install-VCRedist%0D%0A++++++++Install-DirectX%0D%0A++++%7D+catch+%7B%0D%0A++++++++Write-Error+%22An+error+occurred%3A+%24_%22%0D%0A++++%7D+finally+%7B%0D%0A++++++++%23+Wait+for+user+input+before+exiting+if+an+error+occurs+or+at+the+end+of+the+script%0D%0A++++++++++++%23+if+the+script+is+started+by+explorer+and+running+as+administrator%0D%0A++++++++++++%23+or+if+the+session+is+likely+to+close+at+the+end+of+the+script+byt+checking+syntax+of+executed+command+%28if+-NoProfile+is+present%29%0D%0A++++++++++++%23+then+wait+for+user+input+before+exiting%0D%0A++++++++++++if+%28%28Is-StartedByExplorer%29+-and+%28%5BSecurity.Principal.WindowsPrincipal%5D%5BSecurity.Principal.WindowsIdentity%5D%3A%3AGetCurrent%28%29%29.IsInRole%28%5BSecurity.Principal.WindowsBuiltInRole%5D%3A%3AAdministrator%29+-or+%28Is-SessionLikelyToClose%29%29+%7B%0D%0A++++++++++++++++Read-Host+%22Press+Enter+to+exit%22%0D%0A++++++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0AMain+-Verbose%3A%24Verbose%0D%0AExit&SystemScriptType3=Ps1&FirstLogonScript0=reg+add+%22HKLM%5CSOFTWARE%5CPolicies%5CMicrosoft%5CWindows+NT%5CSystemRestore%22+%2Fv+%22DisableConfig%22+%2Ft+%22REG_DWORD%22+%2Fd+%221%22+%2Ff%0D%0Areg+add+%22HKLM%5CSOFTWARE%5CPolicies%5CMicrosoft%5CWindows+NT%5CSystemRestore%22+%2Fv+%22DisableSR+%22+%2Ft+%22REG_DWORD%22+%2Fd+%221%22+%2Ff%0D%0Areg+add+%22HKLM%5CSOFTWARE%5CMicrosoft%5CWindows+NT%5CCurrentVersion%5CSystemRestore%22+%2Fv+%22DisableConfig%22+%2Ft+%22REG_DWORD%22+%2Fd+%221%22+%2Ff%0D%0Areg+add+%22HKLM%5CSOFTWARE%5CMicrosoft%5CWindows+NT%5CCurrentVersion%5CSystemRestore%22+%2Fv+%22DisableSR+%22+%2Ft+%22REG_DWORD%22+%2Fd+%221%22+%2Ff&FirstLogonScriptType0=Cmd&FirstLogonScript1=DISM.exe+%2FOnline+%2FSet-ReservedStorageState+%2FState%3ADisabled&FirstLogonScriptType1=Cmd&FirstLogonScript2=%40echo+off%0D%0Acls%0D%0A%0D%0Aset+x86%3D%22%25SYSTEMROOT%25%5CSystem32%5COneDriveSetup.exe%22%0D%0Aset+x64%3D%22%25SYSTEMROOT%25%5CSysWOW64%5COneDriveSetup.exe%22%0D%0A%0D%0Aecho+Closing+OneDrive+process.%0D%0Aecho.%0D%0Ataskkill+%2Ff+%2Fim+OneDrive.exe+%3E+NUL+2%3E%261%0D%0Aping+127.0.0.1+-n+5+%3E+NUL+2%3E%261%0D%0A%0D%0Aecho+Uninstalling+OneDrive.%0D%0Aecho.%0D%0Aif+exist+%25x64%25+%28%0D%0A%25x64%25+%2Funinstall%0D%0A%29+else+%28%0D%0A%25x86%25+%2Funinstall%0D%0A%29%0D%0Aping+127.0.0.1+-n+5+%3E+NUL+2%3E%261%0D%0A%0D%0Aecho+Removing+OneDrive+leftovers.%0D%0Aecho.%0D%0Ard+%22%25USERPROFILE%25%5COneDrive%22+%2FQ+%2FS+%3E+NUL+2%3E%261%0D%0Ard+%22C%3A%5COneDriveTemp%22+%2FQ+%2FS+%3E+NUL+2%3E%261%0D%0Ard+%22%25LOCALAPPDATA%25%5CMicrosoft%5COneDrive%22+%2FQ+%2FS+%3E+NUL+2%3E%261%0D%0Ard+%22%25PROGRAMDATA%25%5CMicrosoft+OneDrive%22+%2FQ+%2FS+%3E+NUL+2%3E%261+%0D%0A%0D%0Aecho+Removing+OneDrive+from+the+Explorer+Side+Panel.%0D%0Aecho.%0D%0AREG+DELETE+%22HKEY_CLASSES_ROOT%5CCLSID%5C%7B018D5C66-4533-4307-9B53-224DE2ED1FE6%7D%22+%2Ff+%3E+NUL+2%3E%261%0D%0AREG+DELETE+%22HKEY_CLASSES_ROOT%5CWow6432Node%5CCLSID%5C%7B018D5C66-4533-4307-9B53-224DE2ED1FE6%7D%22+%2Ff+%3E+NUL+2%3E%261%0D%0A%0D%0Aexit&FirstLogonScriptType2=Cmd&FirstLogonScript3=fsutil+behavior+set+disable8dot3+1&FirstLogonScriptType3=Cmd&FirstLogonScript4=winget+install+Brave.Brave+IrfanSkiljan.IrfanView+%2D%2Daccept-package-agreements+%2D%2Daccept-source-agreements&FirstLogonScriptType4=Cmd&RestartExplorer=true&WdacMode=Skip-->
	<settings pass="offlineServicing"></settings>
	<settings pass="windowsPE">
		<component name="Microsoft-Windows-Setup" processorArchitecture="x86" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UserData>
				<ProductKey>
					<Key>00000-00000-00000-00000-00000</Key>
					<WillShowUI>Always</WillShowUI>
				</ProductKey>
				<AcceptEula>true</AcceptEula>
			</UserData>
			<UseConfigurationSet>false</UseConfigurationSet>
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassTPMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassSecureBootCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassRAMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
		<component name="Microsoft-Windows-Setup" processorArchitecture="arm64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UserData>
				<ProductKey>
					<Key>00000-00000-00000-00000-00000</Key>
					<WillShowUI>Always</WillShowUI>
				</ProductKey>
				<AcceptEula>true</AcceptEula>
			</UserData>
			<UseConfigurationSet>false</UseConfigurationSet>
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassTPMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassSecureBootCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassRAMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
		<component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UserData>
				<ProductKey>
					<Key>00000-00000-00000-00000-00000</Key>
					<WillShowUI>Always</WillShowUI>
				</ProductKey>
				<AcceptEula>true</AcceptEula>
			</UserData>
			<UseConfigurationSet>false</UseConfigurationSet>
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassTPMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassSecureBootCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassRAMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="generalize"></settings>
	<settings pass="specialize">
		<component name="Microsoft-Windows-Deployment" processorArchitecture="x86" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe unload "HKU\DefaultUser"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
		<component name="Microsoft-Windows-Deployment" processorArchitecture="arm64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe unload "HKU\DefaultUser"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
		<component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe unload "HKU\DefaultUser"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="auditSystem"></settings>
	<settings pass="auditUser"></settings>
	<settings pass="oobeSystem">
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="x86" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<OOBE>
				<ProtectYourPC>3</ProtectYourPC>
				<HideEULAPage>true</HideEULAPage>
				<HideWirelessSetupInOOBE>false</HideWirelessSetupInOOBE>
				<HideOnlineAccountScreens>true</HideOnlineAccountScreens>
			</OOBE>
			<FirstLogonCommands>
				<SynchronousCommand wcm:action="add">
					<Order>1</Order>
					<CommandLine>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
				</SynchronousCommand>
			</FirstLogonCommands>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="arm64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<OOBE>
				<ProtectYourPC>3</ProtectYourPC>
				<HideEULAPage>true</HideEULAPage>
				<HideWirelessSetupInOOBE>false</HideWirelessSetupInOOBE>
				<HideOnlineAccountScreens>true</HideOnlineAccountScreens>
			</OOBE>
			<FirstLogonCommands>
				<SynchronousCommand wcm:action="add">
					<Order>1</Order>
					<CommandLine>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
				</SynchronousCommand>
			</FirstLogonCommands>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<OOBE>
				<ProtectYourPC>3</ProtectYourPC>
				<HideEULAPage>true</HideEULAPage>
				<HideWirelessSetupInOOBE>false</HideWirelessSetupInOOBE>
				<HideOnlineAccountScreens>true</HideOnlineAccountScreens>
			</OOBE>
			<FirstLogonCommands>
				<SynchronousCommand wcm:action="add">
					<Order>1</Order>
					<CommandLine>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
				</SynchronousCommand>
			</FirstLogonCommands>
		</component>
	</settings>
	<Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
		<ExtractScript>
param(
    [xml] $Document
);

foreach( $file in $Document.unattend.Extensions.File ) {
    $path = [System.Environment]::ExpandEnvironmentVariables( $file.GetAttribute( 'path' ) );
    mkdir -Path( $path | Split-Path -Parent ) -ErrorAction 'SilentlyContinue';
    $encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
        { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
        { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ); }
        default { [System.Text.Encoding]::Default; }
    };
    $bytes = $encoding.GetPreamble() + $encoding.GetBytes( $file.InnerText.Trim() );
    [System.IO.File]::WriteAllBytes( $path, $bytes );
}
		</ExtractScript>
		<File path="C:\Windows\Setup\Scripts\RemovePackages.ps1">
$selectors = @(
	'Microsoft.Microsoft3DViewer';
	'Microsoft.BingSearch';
	'Clipchamp.Clipchamp';
	'Microsoft.WindowsAlarms';
	'Microsoft.549981C3F5F10';
	'Microsoft.Windows.DevHome';
	'MicrosoftCorporationII.MicrosoftFamily';
	'Microsoft.WindowsFeedbackHub';
	'Microsoft.Edge.GameAssist';
	'microsoft.windowscommunicationsapps';
	'Microsoft.WindowsMaps';
	'Microsoft.MixedReality.Portal';
	'Microsoft.BingNews';
	'Microsoft.MicrosoftOfficeHub';
	'Microsoft.Office.OneNote';
	'Microsoft.OutlookForWindows';
	'Microsoft.MSPaint';
	'Microsoft.People';
	'Microsoft.Windows.Photos';
	'Microsoft.PowerAutomateDesktop';
	'Microsoft.SkypeApp';
	'Microsoft.MicrosoftSolitaireCollection';
	'MicrosoftTeams';
	'MSTeams';
	'Microsoft.Todos';
	'Microsoft.Wallet';
	'Microsoft.BingWeather';
	'Microsoft.YourPhone';
	'Microsoft.ZuneMusic';
	'Microsoft.ZuneVideo';
);
$getCommand = {
  Get-AppxProvisionedPackage -Online;
};
$filterCommand = {
  $_.DisplayName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
  }
};
$type = 'Package';
$logfile = 'C:\Windows\Setup\Scripts\RemovePackages.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveCapabilities.ps1">
$selectors = @(
	'Browser.InternetExplorer';
	'Microsoft.Windows.WordPad';
);
$getCommand = {
  Get-WindowsCapability -Online | Where-Object -Property 'State' -NotIn -Value @(
    'NotPresent';
    'Removed';
  );
};
$filterCommand = {
  ($_.Name -split '~')[0] -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-WindowsCapability -Online -ErrorAction 'Continue';
  }
};
$type = 'Capability';
$logfile = 'C:\Windows\Setup\Scripts\RemoveCapabilities.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveFeatures.ps1">
$selectors = @(
	'MicrosoftWindowsPowerShellV2Root';
);
$getCommand = {
  Get-WindowsOptionalFeature -Online | Where-Object -Property 'State' -NotIn -Value @(
    'Disabled';
    'DisabledWithPayloadRemoved';
  );
};
$filterCommand = {
  $_.FeatureName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction 'Continue';
  }
};
$type = 'Feature';
$logfile = 'C:\Windows\Setup\Scripts\RemoveFeatures.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\ShowAllTrayIcons.ps1">
if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
	# Windows 10
	Set-ItemProperty -LiteralPath 'Registry::HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer' -Name 'EnableAutoTray' -Type 'DWord' -Value 0 -Force;
} else {
	# Windows 11
	Register-ScheduledTask -TaskName 'ShowAllTrayIcons' -Xml $(
		Get-Content -LiteralPath "C:\Windows\Setup\Scripts\ShowAllTrayIcons.xml" -Raw;
	);
}
		</File>
		<File path="C:\Windows\Setup\Scripts\ShowAllTrayIcons.xml">
&lt;Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"&gt;
	&lt;Triggers&gt;
		&lt;LogonTrigger&gt;
			&lt;Repetition&gt;
				&lt;Interval&gt;PT1M&lt;/Interval&gt;
				&lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;
			&lt;/Repetition&gt;
			&lt;Enabled&gt;true&lt;/Enabled&gt;
		&lt;/LogonTrigger&gt;
	&lt;/Triggers&gt;
	&lt;Principals&gt;
		&lt;Principal id="Author"&gt;
			&lt;GroupId&gt;S-1-5-32-545&lt;/GroupId&gt;
			&lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;
		&lt;/Principal&gt;
	&lt;/Principals&gt;
	&lt;Settings&gt;
		&lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;
		&lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;
		&lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;
		&lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;
		&lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;
		&lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;
		&lt;IdleSettings&gt;
			&lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;
			&lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;
		&lt;/IdleSettings&gt;
		&lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;
		&lt;Enabled&gt;true&lt;/Enabled&gt;
		&lt;Hidden&gt;false&lt;/Hidden&gt;
		&lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;
		&lt;WakeToRun&gt;false&lt;/WakeToRun&gt;
		&lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;
		&lt;Priority&gt;7&lt;/Priority&gt;
	&lt;/Settings&gt;
	&lt;Actions Context="Author"&gt;
		&lt;Exec&gt;
			&lt;Command&gt;C:\Windows\System32\wscript.exe&lt;/Command&gt;
			&lt;Arguments&gt;C:\Windows\Setup\Scripts\ShowAllTrayIcons.vbs&lt;/Arguments&gt;
		&lt;/Exec&gt;
	&lt;/Actions&gt;
&lt;/Task&gt;
		</File>
		<File path="C:\Windows\Setup\Scripts\ShowAllTrayIcons.vbs">
HKCU = &amp;H80000001
key = "Control Panel\NotifyIconSettings"
Set reg = GetObject("winmgmts://./root/default:StdRegProv")
If reg.EnumKey(HKCU, key, names) = 0 Then
	If Not IsNull(names) Then
		For Each name In names
			reg.SetDWORDValue HKCU, key + "\" + name, "IsPromoted", 1
		Next
	End If
End If
		</File>
		<File path="C:\Windows\Setup\Scripts\MoveActiveHours.vbs">
HKLM = &amp;H80000002
key = "SOFTWARE\Microsoft\WindowsUpdate\UX\Settings"
Set reg = GetObject("winmgmts://./root/default:StdRegProv")
current = Hour(Now)
reg.SetDWORDValue HKLM, key, "ActiveHoursStart", ( current + 23 ) Mod 24
reg.SetDWORDValue HKLM, key, "ActiveHoursEnd", ( current + 11 ) Mod 24
reg.SetDWORDValue HKLM, key, "SmartActiveHoursState", 2
		</File>
		<File path="C:\Windows\Setup\Scripts\MoveActiveHours.xml">
&lt;Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"&gt;
	&lt;Triggers&gt;
		&lt;BootTrigger&gt;
			&lt;Repetition&gt;
				&lt;Interval&gt;PT4H&lt;/Interval&gt;
				&lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;
			&lt;/Repetition&gt;
			&lt;Enabled&gt;true&lt;/Enabled&gt;
		&lt;/BootTrigger&gt;
		&lt;RegistrationTrigger&gt;
			&lt;Repetition&gt;
				&lt;Interval&gt;PT4H&lt;/Interval&gt;
				&lt;StopAtDurationEnd&gt;false&lt;/StopAtDurationEnd&gt;
			&lt;/Repetition&gt;
			&lt;Enabled&gt;true&lt;/Enabled&gt;
		&lt;/RegistrationTrigger&gt;
	&lt;/Triggers&gt;
	&lt;Principals&gt;
		&lt;Principal id="Author"&gt;
			&lt;UserId&gt;S-1-5-19&lt;/UserId&gt;
			&lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;
		&lt;/Principal&gt;
	&lt;/Principals&gt;
	&lt;Settings&gt;
		&lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;
		&lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;
		&lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;
		&lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;
		&lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;
		&lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;
		&lt;IdleSettings&gt;
			&lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;
			&lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;
		&lt;/IdleSettings&gt;
		&lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;
		&lt;Enabled&gt;true&lt;/Enabled&gt;
		&lt;Hidden&gt;false&lt;/Hidden&gt;
		&lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;
		&lt;WakeToRun&gt;false&lt;/WakeToRun&gt;
		&lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;
		&lt;Priority&gt;7&lt;/Priority&gt;
	&lt;/Settings&gt;
	&lt;Actions Context="Author"&gt;
		&lt;Exec&gt;
			&lt;Command&gt;C:\Windows\System32\wscript.exe&lt;/Command&gt;
			&lt;Arguments&gt;C:\Windows\Setup\Scripts\MoveActiveHours.vbs&lt;/Arguments&gt;
		&lt;/Exec&gt;
	&lt;/Actions&gt;
&lt;/Task&gt;
		</File>
		<File path="C:\Windows\Setup\Scripts\MakeEdgeUninstallable.ps1">
$ErrorActionPreference = 'Stop';
&amp; {
	try {
		$params = @{
			LiteralPath = 'C:\Windows\System32\IntegratedServicesRegionPolicySet.json';
			Encoding = 'Utf8';
		};
		$o = Get-Content @params | ConvertFrom-Json;
		$o.policies | ForEach-Object -Process {
			if( $_.guid -eq '{1bca278a-5d11-4acf-ad2f-f9ab6d7f93a6}' ) {
				$_.defaultState = 'enabled';
			}
		};
		$o | ConvertTo-Json -Depth 9 | Out-File @params;
	} catch {
		$_;
	}
} *&gt;&amp;1 &gt;&gt; 'C:\Windows\Setup\Scripts\MakeEdgeUninstallable.log';
		</File>
		<File path="C:\Windows\Setup\Scripts\SetStartPins.ps1">
$json = '{"pinnedList":[]}';
if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
	return;
}
$key = 'Registry::HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start';
New-Item -Path $key -ItemType 'Directory' -ErrorAction 'SilentlyContinue';
Set-ItemProperty -LiteralPath $key -Name 'ConfigureStartPins' -Value $json -Type 'String';
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-01.cmd">
powercfg /H OFF
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-02.reg">
Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CloudContent]
"DisableCloudOptimizedContent"=dword:00000001
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-03.ps1">
Write-Host "Installing .NET Framework 3.5 from ISO..."
foreach( $drive in [System.IO.DriveInfo]::GetDrives() ) {
    if( $found = Join-Path -Path $drive.RootDirectory -ChildPath 'sources\sxs' -Resolve -ErrorAction 'SilentlyContinue' ) {
        Enable-WindowsOptionalFeature -Online -FeatureName 'NetFx3' -Source $found -NoRestart;
        return;
    }
}
'Cannot find any files that match pattern.' | Write-Warning;
Exit
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-04.ps1">
# Check Internet connectivity

Write-Output "Checking for Internet Connectvity by pinging Google DNS 8.8.8.8"
$pp = $ProgressPreference
$ProgressPreference = 'SilentlyContinue'
test-netconnection -ComputerName 8.8.8.8 -InformationLevel Quiet
$ProgressPreference = $pp
Write-Output "Internet Connectivity Check Completed!"

&lt;#
.SYNOPSIS
This PowerShell script ensures it is run with administrator privileges, then installs the necessary Visual C++ Redistributables and DirectX 9 End-User Runtime silently. It provides progress updates throughout the installation process and handles errors gracefully.

.DESCRIPTION
This script performs the following tasks:
- Checks if it is run with administrator privileges and relaunches with elevated permissions if necessary.
- Downloads and installs the latest Visual C++ Redistributables from a GitHub repository.
- Downloads and installs the DirectX 9 End-User Runtime from Microsoft's official website.
- Provides verbose logging for detailed output, including the URLs being accessed, the files being downloaded, and the installation progress.
- Handles errors gracefully by catching exceptions and providing meaningful error messages.
- Waits for user input before exiting if an error occurs or at the end of the script, ensuring that the user is aware of the script's completion or any issues that occurred.

.PARAMETER Verbose
Enables verbose logging for detailed output. When this switch is used, the script will provide additional information about its progress and actions.

.EXAMPLE
.\Install-VCRedistAndDirectX.ps1 -Verbose
Runs the script with verbose logging enabled, providing detailed output about the script's progress and actions.

.EXAMPLE
# Running the script from the Internet
irm https://gist.githubusercontent.com/emilwojcik93/ef790a6b12c8e9358bbc52ed76fb495c/raw/Install-VCRedistAndDirectX.ps1 | iex
Downloads and runs the script directly from the provided URL, ensuring that the latest version is used.

.LINK
https://gist.github.com/emilwojcik93/ef790a6b12c8e9358bbc52ed76fb495c
#&gt;

param (
    [switch]$Verbose
)


if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Output "This script needs to be run as Administrator. Attempting to relaunch."
    $argList = @()

    $PSBoundParameters.GetEnumerator() | ForEach-Object {
        $argList += if ($_.Value -is [switch] -and $_.Value) {
            "-$($_.Key)"
        } elseif ($_.Value) {
            "-$($_.Key) `"$($_.Value)`""
        }
    }

    
    $script = if ($PSCommandPath) {
        "&amp; { &amp; `"$($PSCommandPath)`" ${argList} }"
    } else {
        "&amp;([ScriptBlock]::Create((irm https://gist.githubusercontent.com/emilwojcik93/ef790a6b12c8e9358bbc52ed76fb495c/raw/Install-VCRedistAndDirectX.ps1))) ${argList}"
    }

    $powershellcmd = if (Get-Command pwsh -ErrorAction SilentlyContinue) { "pwsh" } else { "powershell" }
    $processCmd = if (Get-Command wt.exe -ErrorAction SilentlyContinue) { "wt.exe" } else { $powershellcmd }

    Start-Process $processCmd -ArgumentList "$powershellcmd -ExecutionPolicy Bypass -NoProfile -Command $script" -Verb RunAs

    break
}

# Function to check if the parent process is explorer.exe
function Is-StartedByExplorer {
    $parentProcess = Get-WmiObject Win32_Process -Filter "ProcessId=$((Get-WmiObject Win32_Process -Filter "ProcessId=$PID").ParentProcessId)"
    return $parentProcess.Name -eq "explorer.exe"
}

# Function to check if the session is likely to close at the end of the script
function Is-SessionLikelyToClose {
    $commandLineArgs = [Environment]::GetCommandLineArgs()
    return ($commandLineArgs -contains "-NoProfile")
}


function Get-LatestReleaseUrl {
    param (
        [string]$RepoUrl,
        [string]$FilePattern
    )

    Write-Verbose "Fetching the latest release URL from $RepoUrl..."
    $apiUrl = "$RepoUrl/releases/latest"
    try {
        $response = Invoke-RestMethod -Uri $apiUrl -UseBasicParsing
    } catch {
        Write-Error "Failed to access the URL: $RepoUrl"
        return $null
    }

    $latestAsset = $response.assets | Where-Object { $_.name -like $FilePattern }
    if ($null -eq $latestAsset) {
        Write-Error "No file matching the pattern '$FilePattern' found in the latest release."
        return $null
    }

    $downloadUrl = $latestAsset.browser_download_url
    Write-Verbose "Latest release URL: $downloadUrl"
    return $downloadUrl
}

function Download {
    param (
        [string]$Url,
        [string]$Destination,
        [string]$FileType
    )

    Write-Verbose "Download called with Url: $Url, Destination: $Destination, FileType: $FileType"

    if (Test-Path $Destination) {
        Write-Verbose "Removing existing directory: $Destination"
        Remove-Item -Path $Destination -Recurse -Force -ErrorAction SilentlyContinue
    }
    Write-Verbose "Creating directory: $Destination"
    New-Item -ItemType Directory -Force -Path $Destination

    $fileName = [System.IO.Path]::GetFileName($Url)
    $filePath = "$Destination\$fileName"
    Write-Verbose "Downloading file from URL: $Url to $filePath"
    try {
        Invoke-WebRequest -Uri $Url -OutFile $filePath -ErrorAction Stop
    } catch {
        Write-Error "Failed to download the file from URL: $Url"
        return $null
    }

    if (-not (Test-Path $filePath)) {
        Write-Error "Downloaded file not found: $filePath"
        return $null
    }

    Write-Verbose "Downloading completed for file: $filePath"
}

function Install-VCRedist {
    Write-Output "Downloading and installing Visual C++ Redistributables..."
    $vcRedistUrl = Get-LatestReleaseUrl -RepoUrl "https://api.github.com/repos/abbodi1406/vcredist" -FilePattern "VisualCppRedist_AIO_x86_x64.exe"
    if ($null -eq $vcRedistUrl) {
        throw "Failed to get the latest Visual C++ Redistributables URL."
    }

    Write-Verbose "Visual C++ Redistributables URL: $vcRedistUrl"

    $tempDir = "$env:TEMP\VcRedist"
    $result = Download -Url "$vcRedistUrl" -Destination "$tempDir" -FileType "exe"
    if ($null -eq $result) {
        throw "Failed to download and extract Visual C++ Redistributables."
    }

    $vcRedistInstaller = "$tempDir\VisualCppRedist_AIO_x86_x64.exe"
    if (-not (Test-Path $vcRedistInstaller)) {
        throw "Installer file not found: $vcRedistInstaller"
    }

    Write-Verbose "Running installer: $vcRedistInstaller with arguments: /y"
    Start-Process -FilePath $vcRedistInstaller -ArgumentList "/ai /gm2" -NoNewWindow -Wait

    Write-Output "Visual C++ Redistributables installation completed."
}

function Install-DirectX {
    Write-Output "Downloading DirectX 9 End-User Runtime..."
    $ErrorActionPreference = 'Stop'

    # Ensure the temporary directory is clean
    $tempDir = "$env:TEMP\directx"
    if (Test-Path $tempDir) {
        Write-Verbose "Removing existing directory: $tempDir"
        Remove-Item -Path $tempDir -Recurse -Force -ErrorAction SilentlyContinue
    }
    Write-Verbose "Creating directory: $tempDir"
    New-Item -ItemType Directory -Force -Path $tempDir &gt; $null

    $directxUrl = "https://download.microsoft.com/download/8/4/A/84A35BF1-DAFE-4AE8-82AF-AD2AE20B6B14/directx_Jun2010_redist.exe"
    $directxInstaller = "$tempDir\directx_Jun2010_redist.exe"
    Write-Verbose "Downloading DirectX from URL: $directxUrl to $directxInstaller"
    Invoke-WebRequest -Uri $directxUrl -OutFile $directxInstaller

    Write-Verbose "Extracting DirectX 9 End-User Runtime..."
    Start-Process -FilePath $directxInstaller -ArgumentList "/Q /T:$tempDir" -NoNewWindow -Wait

    $dxSetup = "$tempDir\DXSETUP.exe"
    if (-not (Test-Path $dxSetup)) {
        throw "DXSETUP.exe not found in $tempDir"
    }

    Write-Verbose "Installing DirectX 9 End-User Runtime from $dxSetup with arguments: /silent"
    Start-Process -FilePath $dxSetup -ArgumentList "/silent" -NoNewWindow -Wait

    Write-Output "DirectX 9 End-User Runtime installation completed."
}

function Main {
    try {
        Write-Output "Starting installation process..."
        Install-VCRedist
        Install-DirectX
    } catch {
        Write-Error "An error occurred: $_"
    } finally {
        # Wait for user input before exiting if an error occurs or at the end of the script
            # if the script is started by explorer and running as administrator
            # or if the session is likely to close at the end of the script byt checking syntax of executed command (if -NoProfile is present)
            # then wait for user input before exiting
            if ((Is-StartedByExplorer) -and ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -or (Is-SessionLikelyToClose)) {
                Read-Host "Press Enter to exit"
            }
    }
}

Main -Verbose:$Verbose
Exit
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-05.cmd">
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore" /v "DisableConfig" /t "REG_DWORD" /d "1" /f
reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore" /v "DisableSR " /t "REG_DWORD" /d "1" /f
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" /v "DisableConfig" /t "REG_DWORD" /d "1" /f
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" /v "DisableSR " /t "REG_DWORD" /d "1" /f
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-06.cmd">
DISM.exe /Online /Set-ReservedStorageState /State:Disabled
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-07.cmd">
@echo off
cls

set x86="%SYSTEMROOT%\System32\OneDriveSetup.exe"
set x64="%SYSTEMROOT%\SysWOW64\OneDriveSetup.exe"

echo Closing OneDrive process.
echo.
taskkill /f /im OneDrive.exe &gt; NUL 2&gt;&amp;1
ping 127.0.0.1 -n 5 &gt; NUL 2&gt;&amp;1

echo Uninstalling OneDrive.
echo.
if exist %x64% (
%x64% /uninstall
) else (
%x86% /uninstall
)
ping 127.0.0.1 -n 5 &gt; NUL 2&gt;&amp;1

echo Removing OneDrive leftovers.
echo.
rd "%USERPROFILE%\OneDrive" /Q /S &gt; NUL 2&gt;&amp;1
rd "C:\OneDriveTemp" /Q /S &gt; NUL 2&gt;&amp;1
rd "%LOCALAPPDATA%\Microsoft\OneDrive" /Q /S &gt; NUL 2&gt;&amp;1
rd "%PROGRAMDATA%\Microsoft OneDrive" /Q /S &gt; NUL 2&gt;&amp;1 

echo Removing OneDrive from the Explorer Side Panel.
echo.
REG DELETE "HKEY_CLASSES_ROOT\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" /f &gt; NUL 2&gt;&amp;1
REG DELETE "HKEY_CLASSES_ROOT\Wow6432Node\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" /f &gt; NUL 2&gt;&amp;1

exit
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-08.cmd">
fsutil behavior set disable8dot3 1
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-09.cmd">
winget install Brave.Brave IrfanSkiljan.IrfanView --accept-package-agreements --accept-source-agreements
		</File>
		<File path="C:\Windows\Setup\Scripts\Specialize.ps1">
$scripts = @(
	{
		reg.exe add "HKLM\SYSTEM\Setup\MoSetup" /v AllowUpgradesWithUnsupportedTPMOrCPU /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE" /v BypassNRO /t REG_DWORD /d 1 /f;
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		Remove-Item -LiteralPath 'C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk', 'C:\Windows\System32\OneDriveSetup.exe', 'C:\Windows\SysWOW64\OneDriveSetup.exe' -ErrorAction 'Continue';
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v ConfigureChatAutoInstall /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemovePackages.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveCapabilities.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveFeatures.ps1' -Raw | Invoke-Expression;
	};
	{
		net.exe accounts /maxpwage:UNLIMITED;
	};
	{
		reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 1 /f
	};
	{
		icacls.exe C:\ /remove:g "*S-1-5-11"
	};
	{
		Set-ExecutionPolicy -Scope 'LocalMachine' -ExecutionPolicy 'RemoteSigned' -Force;
	};
	{
		fsutil.exe behavior set disableLastAccess 1;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v AUOptions /t REG_DWORD /d 4 /f;
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v NoAutoRebootWithLoggedOnUsers /t REG_DWORD /d 1 /f;
	};
	{
		Register-ScheduledTask -TaskName 'MoveActiveHours' -Xml $( Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\MoveActiveHours.xml' -Raw );
	};
	{
		reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Power" /v HiberbootEnabled /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsConsumerFeatures" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\BitLocker" /v "PreventDeviceEncryption" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge" /v HideFirstRunExperience /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v BackgroundModeEnabled /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v StartupBoostEnabled /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\MakeEdgeUninstallable.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetStartPins.ps1' -Raw | Invoke-Expression;
	};
	{
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ControlAnimations" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\AnimateMinMax" -Name 'DefaultValue' -Value 0 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\TaskbarAnimations" -Name 'DefaultValue' -Value 0 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\DWMAeroPeekEnabled" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\MenuAnimation" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\TooltipAnimation" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\SelectionFade" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\DWMSaveThumbnailEnabled" -Name 'DefaultValue' -Value 0 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\CursorShadow" -Name 'DefaultValue' -Value 0 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ListviewShadow" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ThumbnailsOrIcon" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ListviewAlphaSelect" -Name 'DefaultValue' -Value 0 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\DragFullWindows" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ComboBoxAnimation" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\FontSmoothing" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ListBoxSmoothScrolling" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
		Set-ItemProperty -LiteralPath "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\DropShadow" -Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
	};
	{
		C:\Windows\Setup\Scripts\unattend-01.cmd;
	};
	{
		reg.exe import "C:\Windows\Setup\Scripts\unattend-02.reg";
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\unattend-03.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\unattend-04.ps1' -Raw | Invoke-Expression;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to customize your Windows installation. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\Specialize.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\UserOnce.ps1">
$scripts = @(
	{
		reg.exe add "HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /ve /f;
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'LaunchTo' -Type 'DWord' -Value 1;
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Search' -Name 'SearchboxTaskbarMode' -Type 'DWord' -Value 1;
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' -Name 'VisualFXSetting' -Type 'DWord' -Value 3 -Force;
	};
	{
		New-Item -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Force;
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{5399e694-6ce5-4d6c-8fce-1d8870fdcba0}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{b4bfcc3a-db2c-424c-b029-7fe99a87c641}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{a8cdff1c-4878-43be-b5fd-f8091c1c60d0}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{374de290-123f-4565-9164-39c4925e467b}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{e88865ea-0e1c-4e20-9aa6-edcd0212c87c}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{f874310e-b6b7-47dc-bc84-b9e6b38f5903}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{1cf1260c-4dd0-4ebb-811f-33c572699fde}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{f02c1a0d-be21-4350-88b0-7367fc96ef3c}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{3add1653-eb32-4cb0-bbd7-dfa0abb5acca}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{645ff040-5081-101b-9f08-00aa002f954e}' -Value 0 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{20d04fe0-3aea-1069-a2d8-08002b30309d}' -Value 0 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{59031a47-3f72-44a7-89c5-5595fe6b30ee}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu' -Name '{a0953c92-50dc-43bf-be83-3742fed03c9c}' -Value 1 -Type 'DWord';
		New-Item -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Force;
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{5399e694-6ce5-4d6c-8fce-1d8870fdcba0}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{b4bfcc3a-db2c-424c-b029-7fe99a87c641}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{a8cdff1c-4878-43be-b5fd-f8091c1c60d0}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{374de290-123f-4565-9164-39c4925e467b}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{e88865ea-0e1c-4e20-9aa6-edcd0212c87c}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{f874310e-b6b7-47dc-bc84-b9e6b38f5903}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{1cf1260c-4dd0-4ebb-811f-33c572699fde}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{f02c1a0d-be21-4350-88b0-7367fc96ef3c}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{3add1653-eb32-4cb0-bbd7-dfa0abb5acca}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{645ff040-5081-101b-9f08-00aa002f954e}' -Value 0 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{20d04fe0-3aea-1069-a2d8-08002b30309d}' -Value 0 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{59031a47-3f72-44a7-89c5-5595fe6b30ee}' -Value 1 -Type 'DWord';
		Set-ItemProperty -Path 'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\NewStartPanel' -Name '{a0953c92-50dc-43bf-be83-3742fed03c9c}' -Value 1 -Type 'DWord';
	};
	{
		Get-Process -Name 'explorer' -ErrorAction 'SilentlyContinue' | Where-Object -FilterScript {
			$_.SessionId -eq ( Get-Process -Id $PID ).SessionId;
		} | Stop-Process -Force;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to configure this user account. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "$env:TEMP\UserOnce.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\DefaultUser.ps1">
$scripts = @(
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Internet Explorer\LowRegistry\Audio\PolicyConfig\PropertyStore" /f;
	};
	{
		Remove-ItemProperty -LiteralPath 'Registry::HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Run' -Name 'OneDriveSetup' -Force -ErrorAction 'Continue';
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideFileExt" /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Hidden" /t REG_DWORD /d 1 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\ShowAllTrayIcons.ps1' -Raw | Invoke-Expression;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v ShowTaskViewButton /t REG_DWORD /d 0 /f;
	};
	{
		$names = @(
		  'ContentDeliveryAllowed';
		  'FeatureManagementEnabled';
		  'OEMPreInstalledAppsEnabled';
		  'PreInstalledAppsEnabled';
		  'PreInstalledAppsEverEnabled';
		  'SilentInstalledAppsEnabled';
		  'SoftLandingEnabled';
		  'SubscribedContentEnabled';
		  'SubscribedContent-310093Enabled';
		  'SubscribedContent-338387Enabled';
		  'SubscribedContent-338388Enabled';
		  'SubscribedContent-338389Enabled';
		  'SubscribedContent-338393Enabled';
		  'SubscribedContent-353694Enabled';
		  'SubscribedContent-353696Enabled';
		  'SubscribedContent-353698Enabled';
		  'SystemPaneSuggestionsEnabled';
		);
		
		foreach( $name in $names ) {
		  reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v $name /t REG_DWORD /d 0 /f;
		}
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v TaskbarAl /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v DisableSearchBoxSuggestions /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "UnattendedSetup" /t REG_SZ /d "powershell.exe -WindowStyle Normal -NoProfile -Command \""Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UserOnce.ps1' -Raw | Invoke-Expression;\""" /f;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to modify the default user&#x2019;&#x2019;s registry hive. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\DefaultUser.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\FirstLogon.ps1">
$scripts = @(
	{
		Disable-ComputerRestore -Drive 'C:\';
	};
	{
		cmd.exe /c "rmdir C:\Windows.old";
	};
	{
		C:\Windows\Setup\Scripts\unattend-05.cmd;
	};
	{
		C:\Windows\Setup\Scripts\unattend-06.cmd;
	};
	{
		C:\Windows\Setup\Scripts\unattend-07.cmd;
	};
	{
		C:\Windows\Setup\Scripts\unattend-08.cmd;
	};
	{
		C:\Windows\Setup\Scripts\unattend-09.cmd;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to finalize your Windows installation. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\FirstLogon.log";
		</File>
	</Extensions>
</unattend>